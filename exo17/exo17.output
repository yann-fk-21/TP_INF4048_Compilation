Grammar

    0 $accept: Program $end

    1 Program: stat

    2 stat: bloc

    3 bloc: instr ';'
    4     | instr ';' bloc

    5 instr: VARIABLE '=' E
    6      | PRINT VARIABLE

    7 E: T
    8  | E '+' T

    9 T: F
   10  | T '*' F

   11 F: INTEGER
   12  | VARIABLE


Terminals, with rules where they appear

    $end (0) 0
    '*' (42) 10
    '+' (43) 8
    ';' (59) 3 4
    '=' (61) 5
    error (256)
    INTEGER (258) 11
    PRINT (259) 6
    VARIABLE (260) 5 6 12


Nonterminals, with rules where they appear

    $accept (10)
        on left: 0
    Program (11)
        on left: 1
        on right: 0
    stat (12)
        on left: 2
        on right: 1
    bloc (13)
        on left: 3 4
        on right: 2 4
    instr (14)
        on left: 5 6
        on right: 3 4
    E (15)
        on left: 7 8
        on right: 5 8
    T (16)
        on left: 9 10
        on right: 7 8 10
    F (17)
        on left: 11 12
        on right: 9 10


State 0

    0 $accept: . Program $end

    PRINT     shift, and go to state 1
    VARIABLE  shift, and go to state 2

    Program  go to state 3
    stat     go to state 4
    bloc     go to state 5
    instr    go to state 6


State 1

    6 instr: PRINT . VARIABLE

    VARIABLE  shift, and go to state 7


State 2

    5 instr: VARIABLE . '=' E

    '='  shift, and go to state 8


State 3

    0 $accept: Program . $end

    $end  shift, and go to state 9


State 4

    1 Program: stat .

    $default  reduce using rule 1 (Program)


State 5

    2 stat: bloc .

    $default  reduce using rule 2 (stat)


State 6

    3 bloc: instr . ';'
    4     | instr . ';' bloc

    ';'  shift, and go to state 10


State 7

    6 instr: PRINT VARIABLE .

    $default  reduce using rule 6 (instr)


State 8

    5 instr: VARIABLE '=' . E

    INTEGER   shift, and go to state 11
    VARIABLE  shift, and go to state 12

    E  go to state 13
    T  go to state 14
    F  go to state 15


State 9

    0 $accept: Program $end .

    $default  accept


State 10

    3 bloc: instr ';' .
    4     | instr ';' . bloc

    PRINT     shift, and go to state 1
    VARIABLE  shift, and go to state 2

    $default  reduce using rule 3 (bloc)

    bloc   go to state 16
    instr  go to state 6


State 11

   11 F: INTEGER .

    $default  reduce using rule 11 (F)


State 12

   12 F: VARIABLE .

    $default  reduce using rule 12 (F)


State 13

    5 instr: VARIABLE '=' E .
    8 E: E . '+' T

    '+'  shift, and go to state 17

    $default  reduce using rule 5 (instr)


State 14

    7 E: T .
   10 T: T . '*' F

    '*'  shift, and go to state 18

    $default  reduce using rule 7 (E)


State 15

    9 T: F .

    $default  reduce using rule 9 (T)


State 16

    4 bloc: instr ';' bloc .

    $default  reduce using rule 4 (bloc)


State 17

    8 E: E '+' . T

    INTEGER   shift, and go to state 11
    VARIABLE  shift, and go to state 12

    T  go to state 19
    F  go to state 15


State 18

   10 T: T '*' . F

    INTEGER   shift, and go to state 11
    VARIABLE  shift, and go to state 12

    F  go to state 20


State 19

    8 E: E '+' T .
   10 T: T . '*' F

    '*'  shift, and go to state 18

    $default  reduce using rule 8 (E)


State 20

   10 T: T '*' F .

    $default  reduce using rule 10 (T)
